"""
Django settings for `stuff_factory` project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import mimetypes
import socket
from pathlib import Path

import environ
from rest_framework.permissions import AllowAny

from apps.core.constants import SWAGGER_URL_PREFIX, LOGGER_NAME

env = environ.Env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG", None)
if DEBUG is None:
    env_file_path = BASE_DIR / ".env"
    if env_file_path.exists():
        env.read_env(env_file_path)
    else:
        raise FileNotFoundError(
            "No environment file found. "
            "Please create the following file "
            "(based on `./.env.example`): `./.env`",
        )

    DEBUG = env.bool("DEBUG", False)


ADMINS = [tuple(admin.strip().split(";")) for admin in env.list("ADMINS", [])]

SECRET_KEY = env.str("SECRET_KEY")

FRONT_BASE_URL_NETLOC = (
    env.str("FRONT_BASE_URL_NETLOC")
    .replace("http://", "")
    .replace("https://", "")
    .strip(":/ ")
)
assert (
    FRONT_BASE_URL_NETLOC
), "`FRONT_BASE_URL_NETLOC` is required in a valid format, without `www` (e.g. `stuff-factory.com`)"
FRONT_BASE_URL_SCHEME = (
    env.str("FRONT_BASE_URL_SCHEME", "https").replace("://", "").strip(":/ ")
)
assert FRONT_BASE_URL_SCHEME in {
    "https",
    "http",
}, "`FRONT_BASE_URL_SCHEME` must be either `https` or `http`"
FRONT_URL = f"{FRONT_BASE_URL_SCHEME}://{FRONT_BASE_URL_NETLOC}"
WWW_FRONT_URL = f"{FRONT_BASE_URL_SCHEME}://www.{FRONT_BASE_URL_NETLOC}"

BASE_URL_NETLOC = (
    env.str("BASE_URL_NETLOC")
    .replace("http://", "")
    .replace("https://", "")
    .strip(":/ ")
)
assert (
    BASE_URL_NETLOC
), "`BASE_URL_NETLOC` is required in a valid format (e.g. `api.stuff-factory.com`)"

BASE_URL_SCHEME = env.str("BASE_URL_SCHEME", "https").replace("://", "").strip(":/ ")
assert BASE_URL_SCHEME in {
    "https",
    "http",
}, "`BASE_URL_SCHEME` must be either `https` or `http`"

ALLOWED_HOSTS = list(
    {
        BASE_URL_NETLOC.split(":")[0].strip("/:?& "),
        "localhost",
        *env.list("ALLOWED_HOSTS", []),
    },
)
CSRF_TRUSTED_ORIGINS = [
    f"{BASE_URL_SCHEME}://{BASE_URL_NETLOC}",
    *env.list(
        "CSRF_TRUSTED_ORIGINS",
        [],
    ),
]

CORS_ALLOWED_ORIGINS = [WWW_FRONT_URL, FRONT_URL, *env.list("CORS_EXTRA_ORIGINS", [])]
if DEBUG:
    CORS_ALLOWED_ORIGINS.append(f"{BASE_URL_SCHEME}://{BASE_URL_NETLOC}")

CORS_ALLOW_CREDENTIALS = env.bool("CORS_ALLOW_CREDENTIALS", True)
CORS_ALLOW_ALL_ORIGINS = env.bool("CORS_ALLOW_ALL_ORIGINS", False)


# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # 3rd Party
    # "django_extensions", #
    "debug_toolbar",
    "corsheaders",
    "rest_framework",
    "drf_spectacular",
    "drf_spectacular_sidecar",
    "django_filters",
    # Local
    "apps.core.apps.CoreConfig",
    "apps.specifications.apps.SpecificationsConfig",
    "apps.components.apps.ComponentsConfig",
    "apps.users.apps.UsersConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "stuff_factory.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "stuff_factory.wsgi.application"
ASGI_APPLICATION = "stuff_factory.asgi.application"


# Cache (not mentioned in the requirements, so we comment them)
# REDIS_USER = env.str("REDIS_USER", "default")
# REDIS_PASSWORD = env.str("REDIS_PASSWORD")
# REDIS_HOST = env.str("DJANGO_REDIS_HOST")
# REDIS_PORT_NUMBER = env.str("REDIS_PORT_NUMBER", "6379")
#
# REDIS_CONNECTION_URI = (
#     f"redis://{REDIS_USER}:{REDIS_PASSWORD}@{REDIS_HOST}:{REDIS_PORT_NUMBER}/0"
# )
#
# CACHES = {
#     "default": {
#         "BACKEND": "django_redis.cache.RedisCache",
#         "LOCATION": REDIS_CONNECTION_URI,
#         "OPTIONS": {
#             "CLIENT_CLASS": "django_redis.client.DefaultClient",
#             "IGNORE_EXCEPTIONS": False,
#             "PASSWORD": REDIS_PASSWORD,
#         },
#         "KEY_PREFIX": "PYTOPIA",
#     },
# }


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
# It's a PoC, so for now, we can move forward with SQLite
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    },
    # "default": {
    #     "ENGINE": "django.db.backends.postgresql",
    #     "NAME": env.str("POSTGRES_DB"),
    #     "USER": env.str("POSTGRES_USER"),
    #     "PASSWORD": env.str("POSTGRES_PASSWORD"),
    #     "HOST": env.str("DJANGO_POSTGRES_HOST"),
    #     "PORT": env.int("POSTGRES_PORT"),
    # },
}

# Auth and Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "apps.core.validators.CustomPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]
AUTHENTICATION_BACKENDS = ["apps.core.authentication.EmailOrUsernameAuthBackend"]
AUTH_USER_MODEL = "users.User"


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Media and Static
# https://docs.djangoproject.com/en/5.0/howto/static-files/
STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "static"

STATICFILES_DIRS = [BASE_DIR / "staticfiles"]
for directory in STATICFILES_DIRS:
    Path(directory).mkdir(parents=True, exist_ok=True)

STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

MEDIA_ROOT = BASE_DIR / "media"
MEDIA_URL = "/media/"


# DRF
DEFAULT_PAGE_SIZE = env.int("DEFAULT_PAGE_SIZE", 10)
MAX_PAGE_SIZE = env.int("MAX_PAGE_SIZE", 100)

REST_FRAMEWORK = {
    "EXCEPTION_HANDLER": "apps.core.exceptions.custom_exception_handler",
    "DEFAULT_METADATA_CLASS": "apps.core.metadata.CustomMetadata",
    # FIXME must restrict `DEFAULT_AUTHENTICATION_CLASSES` and `DEFAULT_PERMISSION_CLASSES` after Auth implementation
    "DEFAULT_AUTHENTICATION_CLASSES": [],
    "DEFAULT_PERMISSION_CLASSES": ["rest_framework.permissions.AllowAny"],
    "DEFAULT_SCHEMA_CLASS": "stuff_factory.schema.CustomSchema",
    "DEFAULT_PAGINATION_CLASS": "apps.core.pagination.StrictLimitOffsetPagination",
    "PAGE_SIZE": DEFAULT_PAGE_SIZE,
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.ScopedRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {
        "anon": "2000/day",
        "specification_group_crud": "30/minute",
        "specification_crud": "30/minute",
        "component_crud": "30/minute",
    },
}

if DEBUG:
    for key in REST_FRAMEWORK["DEFAULT_THROTTLE_RATES"]:
        REST_FRAMEWORK["DEFAULT_THROTTLE_RATES"][key] = "60/minute"

# DRF Spectacular (Swagger)
SPECTACULAR_SETTINGS = {
    "SWAGGER_UI_DIST": "SIDECAR",
    "SWAGGER_UI_SETTINGS": {
        "persistAuthorization": True,
        "docExpansion": "none",
        "filter": True,
        "tagsSorter": "alpha",
    },
    "SWAGGER_UI_FAVICON_HREF": "SIDECAR",
    "REDOC_DIST": "SIDECAR",
    "TITLE": "Stuff-Factory Project API",
    "DESCRIPTION": "This is a document to understand the API URLs and requirements",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    "COMPONENT_SPLIT_REQUEST": True,
    "SCHEMA_PATH_PREFIX": rf"/{SWAGGER_URL_PREFIX}/",
    "PREPROCESSING_HOOKS": ["stuff_factory.schema.custom_preprocessing_hook"],
    "DEFAULT_GENERATOR_CLASS": "stuff_factory.schema.CustomSchemaGenerator",
    "ENUM_NAME_OVERRIDES": {},
}


# Logging
LOG_DIR = BASE_DIR / "logs"
LOG_DIR.mkdir(parents=False, exist_ok=True)

DJANGO_DEBUG_LOG_FILE_NAME = env.str("DJANGO_DEBUG_LOG_FILE_NAME", "django.log")
DJANGO_DEBUG_LOG_FILE = LOG_DIR / DJANGO_DEBUG_LOG_FILE_NAME
Path(DJANGO_DEBUG_LOG_FILE).touch(exist_ok=True)

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "\n\nTime: {asctime}\nFile: {pathname}\nModule: {module}"
            "\nFunction: {funcName}\nDetails: {message}\nArgs: {args}\n",
            "style": "{",
        },
        "simple": {"format": "\n{levelname} {asctime} - {message}", "style": "{"},
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        LOGGER_NAME: {
            "level": "DEBUG",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": DJANGO_DEBUG_LOG_FILE,
            "formatter": "verbose",
            "maxBytes": 1024 * 1024 * 100,
            "backupCount": 5,
        },
    },
    "loggers": {
        LOGGER_NAME: {
            "handlers": [LOGGER_NAME, "console"],
            "level": "DEBUG",
            "propagate": True,
        },
    },
}


# Django Debug Toolbar
_, _, ips = socket.gethostbyname_ex(socket.gethostname())
INTERNAL_IPS = [ip[: ip.rfind(".")] + ".1" for ip in ips] + [
    "127.0.0.1",
    "localhost",
]
SHOW_TOOLBAR_CALLBACK = DEBUG


# To prevent failure in loading statics for Django Admin
mimetypes.add_type("application/javascript", ".js", True)
